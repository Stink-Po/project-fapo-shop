"""
Django settings for fapo project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from celery.schedules import crontab
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')
SITE_ID = 1

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['yourdomain.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
# 3rd
    "whitenoise.runserver_nostatic",
    "django.contrib.humanize",
    "social_django",
    "django_extensions",
    "taggit",
    'django_celery_beat',
    "csp",
# local
    "accounts.apps.AccountsConfig",
    "pages.apps.PagesConfig",
    "sms.apps.SmsConfig",
    "cities.apps.CitiesConfig",
    "blog.apps.BlogConfig",
    "tickets.apps.TicketsConfig",
    "shop.apps.ShopConfig",
    "cart.apps.CartConfig",
    "orders.apps.OrdersConfig",
    "offers.apps.OffersConfig",
    "staff_area.apps.StaffAreaConfig",
]

MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',
    # custom middleware

]
ROOT_URLCONF = 'fapo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "pages.context_processors.global_value",
            ],
        },
    },
]

WSGI_APPLICATION = 'fapo.wsgi.application'

SESSION_ENGINE = "django.contrib.sessions.backends.db"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default authentication backend
    "social_core.backends.google.GoogleOAuth2",

]

LOGIN_URL = "accounts:login"
AUTH_USER_MODEL = "accounts.CustomUser"
LOGIN_REDIRECT_URL = "pages:index"
LOGOUT_REDIRECT_URL = "pages:index"

# Google Auth settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config("GOOGLE_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config("GOOGLE_SECRET")

SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'accounts.pipeline.save_profile',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config("DB_NAME"),  # Custom DB name from .env
        'USER': config("DB_USER"),  # DB user from .env
        'PASSWORD': config("DB_PASSWORD"),  # DB password from .env
        'HOST': config("DB_HOST"),  # 'db' service name from Docker Compose
        'PORT': config("DB_PORT"),  # Default port is 5432
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tehran'
CELERY_TIMEZONE = 'Asia/Tehran'
CELERY_ENABLE_UTC = False

USE_I18N = False

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_MANIFEST_STRICT = False
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Redis Settings

REDIS_HOST = config('REDIS_HOST')
REDIS_PORT = config('REDIS_PORT')
REDIS_DB = config('REDIS_DB')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',  # Capture all levels of logs (DEBUG and above)
            'class': 'logging.FileHandler',
            'filename': 'log.txt',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',  # Set to DEBUG to capture all levels of logs
            'propagate': True,
        },
        'django.db.backends': {
            'level': 'DEBUG',  # Capture SQL queries
            'handlers': ['file'],
            'propagate': False,
        },
        'django.request': {
            'level': 'ERROR',  # Log only ERROR and CRITICAL for requests
            'handlers': ['file'],
            'propagate': False,
        },
        'django.security': {
            'level': 'WARNING',  # Log security-related messages with WARNING level
            'handlers': ['file'],
            'propagate': False,
        },
        'django.template': {
            'level': 'DEBUG',  # Log template-related debugging information
            'handlers': ['file'],
            'propagate': False,
        },
        'django.server': {
            'level': 'INFO',  # Log server-related information (info and higher)
            'handlers': ['file'],
            'propagate': False,
        },
        'django.middleware': {
            'level': 'WARNING',  # Log warnings from middleware
            'handlers': ['file'],
            'propagate': False,
        },
    },
}


CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

CART_SESSION_ID = 'cart'

# clergy task settings

CELERY_BEAT_SCHEDULE = {
    'clear_abandoned_carts_every_15_min': {
        'task': 'orders.tasks.clear_abandoned_carts',
        'schedule': crontab(minute='*/5'),  # every 5 minutes
    },
    'discount': {
        "task": 'orders.tasks.product_discount',
        "schedule": crontab(minute='00', hour="00", day_of_week="*", day_of_month="*", month_of_year="*")
    },
    "offers": {
        "task": "orders.tasks.check_offers",
        'schedule': crontab(minute='*/5'),
    },
    "back_up": {
        "task": "orders.tasks.backup_database",
        "schedule": crontab(minute='00', hour="00", day_of_week="*", day_of_month="*", month_of_year="*")
    }

}

# celery settings

CELERY_BROKER_URL = config("CELERY_BROKER_URL")

CELERY_RESULT_BACKEND = None

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = "your email smtp"
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_PORT = 465
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = True
ZIBAL_API_TOKEN = config("ZIBAL_API_TOKEN")

CSP_DEFAULT_SRC = ["'self'"]
CSP_SCRIPT_SRC = ["'self'", "trusted-scripts.com"]
CSP_STYLE_SRC = ["'self'", "trusted-styles.com"]
CSP_IMG_SRC = ["'self'", "trusted-images.com"]

USE_X_FORWARDED_HOST = True
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    SECURE_PROXY_SSL_HEADER = None

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
CSRF_COOKIE_SECURE = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_SSL_REDIRECT = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
